Description:  This template deploys a demo VPC


Parameters:
  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String
    Default: Xuhui's vpc

  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.192.0.0/16

  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.192.10.0/24

  PublicSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: 10.192.11.0/24

  PublicSubnet3CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the third Availability Zone
    Type: String
    Default: 10.192.12.0/24

  PrivateSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.192.20.0/24

  PrivateSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String
    Default: 10.192.21.0/24

  PrivateSubnet3CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the third Availability Zone
    Type: String
    Default: 10.192.22.0/24

  RouteTableCIDR:
    Description: Please enter the IP range (CIDR notation) for the route table 
    Type: String
    Default: 0.0.0.0/0

  SSLarn:
    Type: String


  AMIID:
    Type: String
  
  BucketID:
    Type: String


  AccessKey:
    Type: String
  
  SecretKey:
    Type: String

  DomainName:
    Type: String
    Default: "prod.xuhuizhu.me"
  
  HostZone:
    Type: String
    Default: Z1029382CU90ACOHPKR3

  cloudWatchAgentPolicyArn:
    Description: CloudWatchAgentServerPolicy ARN
    Type: String
    Default: 'arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy'



Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName


  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ2)


  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 2, !GetAZs  '' ]
      CidrBlock: !Ref PublicSubnet3CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ3)

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Routes


  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ1)

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ2)

  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 2, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet3CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ3)

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: !Ref RouteTableCIDR
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet3

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Routes (AZ1)


        
        

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1


  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet2

  PrivateSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet3
  


  LoadBalanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Load Balancer security group
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443


  ApplicationSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Application security group
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - SourceSecurityGroupId: !GetAtt LoadBalanceSecurityGroup.GroupId
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
        - SourceSecurityGroupId: !GetAtt LoadBalanceSecurityGroup.GroupId
          IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080


  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Database security group
      VpcId: !Ref VPC
      SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 3306
            ToPort: 3306
            SourceSecurityGroupId: !GetAtt ApplicationSecurityGroup.GroupId

  Bucket:
    Type: AWS::S3::Bucket
    Properties: 
      BucketName: !Ref BucketID
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
      BucketEncryption: 
        ServerSideEncryptionConfiguration: 
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256
      LifecycleConfiguration: 
        Rules:
          - Id: Rule for log prefix
            Prefix: logs
            Status: Enabled
            Transitions:
              - TransitionInDays: 30
                StorageClass: STANDARD_IA
            ExpirationInDays: 365


  DBParameterGroup:
    Type: AWS::RDS::DBParameterGroup    
    Properties: 
      Description: A DBparameterGroup
      Family: MySQL8.0
      
  myDBSubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties:
      DBSubnetGroupDescription: "description"
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
        - !Ref PrivateSubnet3

  MyDB:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier:
        "csye6225"        
      VPCSecurityGroups: 
      - !GetAtt DBSecurityGroup.GroupId
      DBName: "csye6225"
      DBSubnetGroupName: !Ref myDBSubnetGroup
      DBParameterGroupName: !Ref DBParameterGroup
      PubliclyAccessible: "false"
      MultiAZ: "false"
      AllocatedStorage: '5'
      DBInstanceClass: db.t3.micro
      Engine: MySQL
      MasterUsername: "csye6225"
      MasterUserPassword: "87171799"
      KmsKeyId: !Ref RDSkmsKey
      StorageEncrypted: 'true'





  WebAppS3Role:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: WebAppS3
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: ["s3:PutObject", "s3:GetObject", "s3:DeleteObject"]
                Resource: 
                  - "arn:aws:s3:::${BucketID}"
                  - "arn:aws:s3:::${BucketID}/*"

  
  
  CodeDeployEC2S32:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      ManagedPolicyName: CodeDeploy-EC2-S32
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 's3:Get*'
              - 's3:List*'
            Effect: Allow
            Resource:
              - 'arn:aws:s3:::xuhuizhucodedeploy/*'
              - 'arn:aws:s3:::aws-codedeploy-us-east-2/*'
              - 'arn:aws:s3:::aws-codedeploy-us-east-1/*'

  GHUploadToS33:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      ManagedPolicyName: GH-Upload-To-S33
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 's3:PutObject'
              - 's3:Get*'
              - 's3:List*'
              - 's3:DeleteObject'
            Effect: Allow
            Resource: 
              - 'arn:aws:s3:::xuhuizhucodedeploy/*'
              - "arn:aws:s3:::${BucketID}"
              - "arn:aws:s3:::${BucketID}/*"

  EC2Excute:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      ManagedPolicyName: GH-Upload-To-S32
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
            - "*"
            Effect: Allow
            Resource: 
              - "*"


  CodeDeployServiceRole2:
    Type: 'AWS::IAM::Role'
    DependsOn: CodeDeployEC2S32
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      RoleName: EC2CSYEROLE
      ManagedPolicyArns:
        - !Ref CodeDeployEC2S32
        - !Ref cloudWatchAgentPolicyArn
        - !Ref GHUploadToS33
        - !Ref EC2Excute

      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-CodeDeployServiceRole1'
  
  
  MyFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Ref EC2Excute

  S3BucketsInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - Ref: WebAppS3Role


  CodeDeployInstanceProfile1:
    DependsOn: CodeDeployServiceRole2
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Roles:
        - EC2CSYEROLE



  MyTokenTable:
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions:
        - 
          AttributeName: email
          AttributeType: S

      KeySchema:
        - 
          AttributeName: email
          KeyType: HASH
      TableName: TokenTable
      ProvisionedThroughput: 
        ReadCapacityUnits: 3
        WriteCapacityUnits: 3
      TimeToLiveSpecification: 
        AttributeName: TimeToLive
        Enabled: true
        
  MySNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: Csye6225Topic
      Subscription:  
      - 
        Endpoint: !GetAtt MyLambda.Arn
        Protocol: lambda

  LambdaFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt MyLambda.Arn
      Principal: sns.amazonaws.com




  MyLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code: 
        ZipFile: >
          import json

          import smtplib
          
          import boto3

          def lambda_handler(event, context):
              # TODO implement
              message = json.dumps(event)
              client = boto3.client('ses' )    
              data = json.loads(event['Records'][0]['Sns']['Message'])
              print(data['email'])
              print(data['token'])
              
              response = client.send_email(
                  Destination={
                      'ToAddresses': [data['email'],],
                      },
                  Message={
                      'Body': {
                          'Text': {
                              'Charset': 'UTF-8',
                              'Data': data['token'],
                          },
                      },
                      'Subject': {
                          'Charset': 'UTF-8',
                          'Data': "this is sub",
                      },
                  },
                  Source="no-reply@prod.xuhuizhu.me",
              )
              return {
                  'statusCode': 200,
                  'body': json.dumps('Hello from Lambda!')
              }
      Handler: index.lambda_handler
      Runtime: python3.9
      Role: !GetAtt MyFunctionRole.Arn 

  

  # ApplicationInstance:
  #   Type: AWS::EC2::Instance
  #   DependsOn: MyDB
  #   Properties:      
  #     ImageId: !Ref AMIID
  #     IamInstanceProfile: !Ref S3BucketsInstanceProfile
  #     InstanceType: t2.micro
  #     SecurityGroupIds:
  #       - !GetAtt ApplicationSecurityGroup.GroupId
  #     SubnetId: !Ref PublicSubnet1
  #     BlockDeviceMappings:
  #       - DeviceName: /dev/xvda
  #         Ebs:
  #           VolumeType: gp2
  #           VolumeSize: '20'
  #           DeleteOnTermination: 'true'
  #           Encrypted: 'true'
  #     UserData: 
  #       Fn::Base64: !Sub |
  #         #!/bin/bash -
  #         sudo su          
  #         echo export SQL_URL=${MyDB.Endpoint.Address} >> /etc/environment
  #         echo export SQL_USERNAME="csye6225" >> /etc/environment
  #         echo export SQL_PASSWORD="87171799" >> /etc/environment
  #         echo export BUCKETNAME=${BucketID} >> /etc/environment
  #         echo export ACCESSKEY=${AccessKey} >> /etc/environment
  #         echo export SECRETKEY=${SecretKey} >> /etc/environment 
  #         sudo java -jar /tmp/target/demo-0.0.1-SNAPSHOT.jar

        
          




  EBSkmsKey:
    Type: AWS::KMS::Key
    Properties: 
      KeyPolicy:
        Version: "2012-10-17"
        Statement:
          - Sid: "Enable IAM User Permissions"
            Effect: "Allow"
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: 
              - "kms:*"
            Resource: "*"
          - Sid: "Enable Service Role"
            Effect: "Allow"
            Principal: 
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling' 
            Action: 
              - "kms:*"
            Resource: "*"

  RDSkmsKey:
    Type: AWS::KMS::Key
    Properties: 
      KeyPolicy:
        Version: "2012-10-17"
        Statement:
          - Sid: "Enable IAM User Permissions"
            Effect: "Allow"
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: 
              - "kms:*"
            Resource: "*"
          # - Sid: "Enable Service Role"
          #   Effect: "Allow"
          #   Principal: 
          #     AWS: arn:aws:iam::${AWS::AccountId}:role/EC2CSYEROLE 
          #   Action: 
          #     - "kms:*"
          #   Resource: "*"



  asgLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub '${AWS::StackName}-launch-template'
      LaunchTemplateData:
        ImageId: !Ref AMIID
        IamInstanceProfile: 
          Arn: !GetAtt CodeDeployInstanceProfile1.Arn          
        InstanceType: t2.micro
        SecurityGroupIds:
          - !GetAtt ApplicationSecurityGroup.GroupId
        #KeyName: csye6225
        # NetworkInterfaces: 
        #   - AssociatePublicIpAddress: true
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              VolumeType: gp2
              VolumeSize: '20'
              DeleteOnTermination: 'true'
              Encrypted: 'true'
              KmsKeyId: !Ref EBSkmsKey
        UserData: 
          Fn::Base64: !Sub |
            #!/bin/bash -
            sudo su          
            echo export SQL_URL=${MyDB.Endpoint.Address} >> /etc/environment
            echo export SQL_USERNAME="csye6225" >> /etc/environment
            echo export SQL_PASSWORD="87171799" >> /etc/environment
            echo export BUCKETNAME=${BucketID} >> /etc/environment
            echo export TABLENAME=${MyTokenTable} >> /etc/environment
            echo export SNSARN=${MySNSTopic} >> /etc/environment
            # echo export ACCESSKEY=${AccessKey} >> /etc/environment
            # echo export SECRETKEY=${SecretKey} >> /etc/environment 
            # sudo java -jar /tmp/target/demo-0.0.1-SNAPSHOT.jar

  
  asgWebApp:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: MyDB
    Properties:
      AutoScalingGroupName: !Sub ${AWS::StackName}-asg
      AvailabilityZones:
        - us-east-1a
        - us-east-1b
        - us-east-1c
      Cooldown: '60'
      DesiredCapacity: '3'
      HealthCheckGracePeriod: 90
      HealthCheckType: EC2
      LaunchTemplate:
        LaunchTemplateId: !Ref asgLaunchTemplate
        Version: !GetAtt asgLaunchTemplate.LatestVersionNumber
      # LoadBalancerNames:
      #   - String
      MaxSize: '5'
      MinSize: '3'
      NewInstancesProtectedFromScaleIn: false
      Tags:
        - Key: Application
          Value: WebApp
          PropagateAtLaunch: "true"
        - Key: Name
          Value: !Sub ${AWS::StackName}-asg
          PropagateAtLaunch: "true"
      TargetGroupARNs:
        - !Ref loadBalancerTargetGroup
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
        - !Ref PublicSubnet3

  WebServerScaleUpPolicy:
    Type: 'AWS::AutoScaling::ScalingPolicy'
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref asgWebApp
      Cooldown: '60'
      ScalingAdjustment: '1'

  WebServerScaleDownPolicy:
    Type: 'AWS::AutoScaling::ScalingPolicy'
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref asgWebApp
      Cooldown: '60'
      ScalingAdjustment: '-1'

  CPUAlarmHigh:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: Scale-up if CPU > 5% 
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: '120'
      EvaluationPeriods: '1'
      Threshold: '5'
      AlarmActions:
        - !Ref WebServerScaleUpPolicy
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref asgWebApp
      ComparisonOperator: GreaterThanThreshold

  CPUAlarmLow:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: Scale-down if CPU < 3% 
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: '120'
      EvaluationPeriods: '1'
      Threshold: '3'
      AlarmActions:
        - !Ref WebServerScaleDownPolicy
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref asgWebApp
      ComparisonOperator: LessThanThreshold

  loadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'
      Name: !Sub ${AWS::StackName}-load-balancer
      Scheme: internet-facing
      SecurityGroups:
        - !GetAtt LoadBalanceSecurityGroup.GroupId
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
        - !Ref PublicSubnet3
      Tags:
        - Key: Application
          Value: WebApp
        - Key: Name
          Value: !Sub ${AWS::StackName}-load-balancer
      Type: application

  loadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 90
      HealthCheckPath: '/healthz'
      HealthCheckPort: '8080'
      HealthCheckProtocol: 'HTTP'
      HealthCheckTimeoutSeconds: 60
      HealthyThresholdCount: 2
      IpAddressType: ipv4
      Name: !Sub ${AWS::StackName}-lb-tg
      Port: 8080
      Protocol: 'HTTP'
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-lb-tg
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '20'
      TargetType: instance
      UnhealthyThresholdCount: 2
      VpcId: !Ref VPC

  loadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref loadBalancerTargetGroup
      LoadBalancerArn: !Ref loadBalancer
      Certificates: 
        - CertificateArn: !Ref SSLarn
      Port: 443
      Protocol: HTTPS

  loadBalancerCertificate:
    Type: AWS::ElasticLoadBalancingV2::ListenerCertificate
    Properties: 
      Certificates: 
        - CertificateArn: !Ref SSLarn
      ListenerArn: !Ref loadBalancerListener


  dnsARecordSet:
    Type: 'AWS::Route53::RecordSet'
    Properties:
      Name: !Ref DomainName
      Type: A
      HostedZoneId: !Ref HostZone
      AliasTarget:
        DNSName: !GetAtt 
          - loadBalancer
          - DNSName
        EvaluateTargetHealth: false
        HostedZoneId: !GetAtt 
          - loadBalancer
          - CanonicalHostedZoneID

  codeDeployEC2ServiceRoleId:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Sid: codeDeployEC2ServiceRole
            Effect: Allow
            Principal:
              Service: codedeploy.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      RoleName: 1CodeDeployEC2ServiceRole
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole'
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-CodeDeployEC2ServiceRole'
  ec2ApplicationId:
    Type: 'AWS::CodeDeploy::Application'
    Properties:
      ApplicationName: csye6225-webapp
      ComputePlatform: Server
  ec2DeploymentGroupId:
    Type: 'AWS::CodeDeploy::DeploymentGroup'
    Properties:
      ApplicationName: !Ref ec2ApplicationId
      DeploymentGroupName: csye6225-webapp-deployment
      AutoScalingGroups:
        - !Ref asgWebApp
      ServiceRoleArn: !GetAtt 
        - codeDeployEC2ServiceRoleId
        - Arn
      DeploymentStyle:
        DeploymentType: IN_PLACE
        DeploymentOption: WITHOUT_TRAFFIC_CONTROL
      Ec2TagFilters:
        - Key: Application Role
          Value: Web Server
          Type: KEY_AND_VALUE
      DeploymentConfigName: CodeDeployDefault.AllAtOnce
      AutoRollbackConfiguration:
        Enabled: 'True'
        Events:
          - DEPLOYMENT_FAILURE
          - DEPLOYMENT_STOP_ON_ALARM
          - DEPLOYMENT_STOP_ON_REQUEST
